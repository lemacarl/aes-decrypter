{"version":3,"sources":["main.min.js","main.js"],"names":["displayToast","message","M","toast","html","decryptFile","file","password","reader","FileReader","inputType","document","querySelector","value","readAsArrayBuffer","readAsText","onload","e","pass","CryptoJS","enc","Utf8","parse","cipherText","lib","WordArray","create","target","result","decrypted","getDecryptedOutput","type","output","filterOutput","blob","Blob","blobUrl","URL","createObjectURL","download","name","url","anchor","getElementById","href","click","args","AES","decrypt","ciphertext","iv","mode","CBC","padding","pad","Pkcs7","reorganizeHexValues","toString","Hex","Base64","values","columnCount","i","length","isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","console","error","fileUpload","fileName","btnDecrypt","addEventListener","files","preventDefault"],"mappings":"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","file":"main.min.js","sourcesContent":["'use strict'; /*!\n               *\n               *  AES Decrypter\n               *\n               *  Licensed under the Apache License, Version 2.0 (the \"License\");\n               *  you may not use this file except in compliance with the License.\n               *  You may obtain a copy of the License at\n               *\n               *    https://www.apache.org/licenses/LICENSE-2.0\n               *\n               *  Unless required by applicable law or agreed to in writing, software\n               *  distributed under the License is distributed on an \"AS IS\" BASIS,\n               *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n               *  See the License for the specific language governing permissions and\n               *  limitations under the License\n               *\n               */\n/* eslint-env browser */\n\n/**\n                          * Display toast using Materialize\n                          * @param {*} message Toast message\n                          */\nfunction displayToast(message) {\n  M.toast({\n    html: message });\n\n}\n\n/**\n   * Decrypt file using CryptoJS\n   * @param {*} file File object\n   * @param {*} password Password\n   */\nfunction decryptFile(file, password) {\n  var reader = new FileReader();\n  var inputType = document.\n  querySelector('input[name=\"input-type\"]:checked').\n  value;\n\n  // Change reader method based on input type\n  if ('hex' === inputType) {\n    reader.readAsArrayBuffer(file);\n  } else {\n    reader.readAsText(file);\n  }\n  reader.onload = function (e) {\n    var pass = CryptoJS.enc.Utf8.parse(password);\n    var cipherText = void 0;\n\n    // Render cipher text based on input type\n    if ('hex' === inputType) {\n      cipherText = CryptoJS.lib.WordArray.create(e.target.result);\n    } else {\n      cipherText = e.target.result;\n    }\n\n    // Decrypted file\n    var decrypted = getDecryptedOutput({\n      cipherText: cipherText,\n      pass: pass,\n      type: inputType });\n\n\n    // Filter output based on input type\n    var output = filterOutput(decrypted, inputType);\n    var blob = new Blob([output], {\n      type: 'application/octet-stream' });\n\n\n    var blobUrl = URL.createObjectURL(blob);\n    download(file.name, blobUrl);\n  };\n}\n\n/**\n   * Trigger file download\n   * @param {String} name File name\n   * @param {String} url URL\n   */\nfunction download(name, url) {\n  var anchor = document.getElementById('download');\n  anchor.href = url;\n  anchor.download = name;\n  anchor.click();\n}\n\n/**\n   * Decrypt cipher text\n   * @param {*} args Object with arguments\n   * @return {*} Object\n   */\nfunction getDecryptedOutput(args) {\n  var decrypted = void 0;\n  if ('hex' === args.type) {\n    decrypted = CryptoJS.AES.decrypt({\n      ciphertext: args.cipherText },\n\n    args.pass, {\n      iv: args.pass,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7 });\n\n  } else {\n    decrypted = CryptoJS.AES.decrypt(args.cipherText, args.pass, {\n      iv: args.pass,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7 });\n\n  }\n  return decrypted;\n}\n\n/**\n   * Filter output based on type\n   * @param {*} decrypted Decryptor\n   * @param {*} type Input type\n   * @return {*} String\n   */\nfunction filterOutput(decrypted, type) {\n  var output = void 0;\n  switch (type) {\n    case 'hex':\n      output = reorganizeHexValues(decrypted.toString(CryptoJS.enc.Hex));\n      break;\n    case 'b64':\n      output = decrypted.toString(CryptoJS.enc.Base64);\n      break;\n    case 'utf-8':\n      output = decrypted.toString(CryptoJS.enc.Utf8);\n      break;\n    default:\n      output = decrypted.toString();}\n\n  return output;\n}\n\n/**\n   * Reorganize hex values to correct format\n   * @param {String} values String\n   * @return {String} organized hex values\n   */\nfunction reorganizeHexValues(values) {\n  var output = '';\n  var columnCount = 0;\n  for (var i = 0; i < values.length; i += 4) {\n    columnCount++;\n    output += values[i] + values[i + 1] + values[i + 2] + values[i + 3];\n    if (columnCount === 8) {\n      columnCount = 0;\n      output += '\\n';\n    } else {\n      output += ' ';\n    }\n  }\n  return output;\n}\n\n(function () {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n  /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\n\n\n  if ('serviceWorker' in navigator && (\n  window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js').\n    then(function (registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function () {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function () {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                'service worker became redundant.');\n\n              default:\n              // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function (e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n  var fileUpload = document.getElementById('file-upload');\n  var fileName = document.getElementById('file-name');\n  var password = document.getElementById('password');\n  var btnDecrypt = document.getElementById('btn-decrypt');\n\n  fileUpload.addEventListener('change', function () {\n    fileName.value = fileUpload.files[0].name;\n  });\n\n  btnDecrypt.addEventListener('click', function (e) {\n    e.preventDefault();\n\n    if (!fileUpload.files[0]) {\n      displayToast('Please select a file.');\n      return;\n    }\n    if (!password.value) {\n      displayToast('Please enter a password.');\n      return;\n    }\n    var file = fileUpload.files[0];\n    fileName.value = file.name;\n\n    decryptFile(file, password.value);\n  });\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/*!\n *\n *  AES Decrypter\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n\n/**\n * Display toast using Materialize\n * @param {*} message Toast message\n */\nfunction displayToast(message) {\n  M.toast({\n    html: message\n  });\n}\n\n/**\n * Decrypt file using CryptoJS\n * @param {*} file File object\n * @param {*} password Password\n */\nfunction decryptFile(file, password) {\n  const reader = new FileReader();\n  const inputType = document\n    .querySelector('input[name=\"input-type\"]:checked')\n    .value;\n\n  // Change reader method based on input type\n  if ('hex' === inputType) {\n    reader.readAsArrayBuffer(file);\n  } else {\n    reader.readAsText(file);\n  }\n  reader.onload = e => {\n    const pass = CryptoJS.enc.Utf8.parse(password);\n    let cipherText;\n\n    // Render cipher text based on input type\n    if ('hex' === inputType) {\n      cipherText = CryptoJS.lib.WordArray.create(e.target.result);\n    } else {\n      cipherText = e.target.result;\n    }\n\n    // Decrypted file\n    let decrypted = getDecryptedOutput({\n      cipherText: cipherText,\n      pass: pass,\n      type: inputType\n    });\n\n    // Filter output based on input type\n    let output = filterOutput(decrypted, inputType);\n    const blob = new Blob([output], {\n      type: 'application/octet-stream'\n    });\n\n    let blobUrl = URL.createObjectURL(blob);\n    download(file.name, blobUrl);\n  };\n}\n\n/**\n * Trigger file download\n * @param {String} name File name\n * @param {String} url URL\n */\nfunction download(name, url) {\n  const anchor = document.getElementById('download');\n  anchor.href = url;\n  anchor.download = name;\n  anchor.click();\n}\n\n/**\n * Decrypt cipher text\n * @param {*} args Object with arguments\n * @return {*} Object\n */\nfunction getDecryptedOutput(args) {\n  let decrypted;\n  if ('hex' === args.type) {\n    decrypted = CryptoJS.AES.decrypt({\n      ciphertext: args.cipherText\n    },\n    args.pass, {\n      iv: args.pass,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    });\n  } else {\n    decrypted = CryptoJS.AES.decrypt(args.cipherText, args.pass, {\n      iv: args.pass,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    });\n  }\n  return decrypted;\n}\n\n/**\n * Filter output based on type\n * @param {*} decrypted Decryptor\n * @param {*} type Input type\n * @return {*} String\n */\nfunction filterOutput(decrypted, type) {\n  let output;\n  switch (type) {\n    case 'hex':\n      output = reorganizeHexValues(decrypted.toString(CryptoJS.enc.Hex));\n      break;\n    case 'b64':\n      output = decrypted.toString(CryptoJS.enc.Base64);\n      break;\n    case 'utf-8':\n      output = decrypted.toString(CryptoJS.enc.Utf8);\n      break;\n    default:\n      output = decrypted.toString();\n  }\n  return output;\n}\n\n/**\n * Reorganize hex values to correct format\n * @param {String} values String\n * @return {String} organized hex values\n */\nfunction reorganizeHexValues(values) {\n  let output = '';\n  let columnCount = 0;\n  for (let i = 0; i < values.length; i += 4) {\n    columnCount++;\n    output += values[i] + values[i + 1] + values[i + 2] + values[i + 3];\n    if (columnCount === 8) {\n      columnCount = 0;\n      output += '\\n';\n    } else {\n      output += ' ';\n    }\n  }\n  return output;\n}\n\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n  const fileUpload = document.getElementById('file-upload');\n  const fileName = document.getElementById('file-name');\n  const password = document.getElementById('password');\n  const btnDecrypt = document.getElementById('btn-decrypt');\n\n  fileUpload.addEventListener('change', () => {\n    fileName.value = fileUpload.files[0].name;\n  });\n\n  btnDecrypt.addEventListener('click', e => {\n    e.preventDefault();\n\n    if (!fileUpload.files[0]) {\n      displayToast('Please select a file.');\n      return;\n    }\n    if (!password.value) {\n      displayToast('Please enter a password.');\n      return;\n    }\n    const file = fileUpload.files[0];\n    fileName.value = file.name;\n\n    decryptFile(file, password.value);\n  });\n})();\n"]}